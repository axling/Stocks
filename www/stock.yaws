<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" >
  <head>
    <title>Stocks</title>
    <meta http-equiv="content-type" content="text/html;charset=utf-8" />
    <link rel="stylesheet" href="css/layout.css" type="text/css" />
    <link rel="stylesheet" href="css/menu.css" type="text/css" />
    <link rel="stylesheet" href="css/tables.css" type="text/css" />
    <link rel="stylesheet" href="css/general.css" type="text/css" />
  </head>
  <body>
    <div id="pagewidth" >
      <div id="header" >
	<div id="headline">Stocks</div>
	<erl>
out(A) ->
    {ehtml, [{ul, [{class, "menu"}], 
	      [{li, [], 
		[{a, [{href, "index.yaws"}], [{span, [], ["Start"]}]}]},
	       {li, [], 
		[{a, [{href, "stock.yaws"}, {class, active}], [{span, [], ["Stocks"]}]}]}]}]}.
	</erl>
      </div>
      <div id="wrapper" class="clearfix" >
	<div id="twocols" class="clearfix"> 
	  <div id="maincol" >
	    <erl>
-include("include/mnesia_defs.hrl").
-include_lib("stdlib/include/qlc.hrl").
out(A) ->
    QueryList = yaws_api:parse_query(A),
    io:format("~p", [A#arg.querydata]),
    case proplists:get_value("name", QueryList) of
	Instrument when not is_atom(Instrument) ->
	    Days = list_to_integer(proplists:get_value("days", QueryList, "30")),
	    Paginate = list_to_integer(proplists:get_value("paginate", QueryList, "15")),
	    PaginateNr = list_to_integer(proplists:get_value("paginate_nr", QueryList, "0")),
	    PageStart = if PaginateNr =< 0 -> 1; true -> PaginateNr*Paginate end,
	    QhCompany = db_handler:get_query_handle(company),
	    [Company] = db_handler:q(qlc:q([C#company.name || C <- QhCompany, 
							      C#company.instrument==Instrument])),
	    %% Here I assume that we are running yaws from the root directory
	    QhStocks = db_handler:get_query_handle(stocks),
	    StockQuery = qlc:q([{Stock#stocks.date, Stock#stocks.closing} ||
			      Stock <- QhStocks, 
			      Stock#stocks.company == Company]),
	    Stocks = lists:sort(
		       fun({A, _}, {B, _}) ->
			       date_lib:is_greater(B, A)
		       end, db_handler:q(StockQuery)),
	    TempStocks = lists:nthtail(length(Stocks)-Days, Stocks),
	    StdErrMonth = std_err([S1 || {_,S1} <- TempStocks]),
	    StdErrAll = std_err([S2 || {_,S2} <- Stocks]),
	    AvgPriceTemp = lists:sum([S1 || {_,S1} <- TempStocks])/length(TempStocks),
	    AvgPrice = lists:sum([S1 || {_,S1} <- Stocks])/length(Stocks),
	    MaxValueTemp = lists:max([Val || {_, Val} <- TempStocks]),
	    MaxValue = lists:max([Val || {_, Val} <- Stocks]),
	    MinValueTemp = lists:min([Val || {_, Val} <- TempStocks]),
	    MinValue = lists:min([Val || {_, Val} <- Stocks]),
	    ChartString = chart_builder:build_chart(Company, Stocks, Days, 400, 200),
	    %% Remove all values from stocks that are older than 30 days
	    {ehtml, [{img, [{src, ChartString}, {alt, "Chart"}]},
		     {table, [], 
		      [{tr, [], 
			[{th, [], []}, {th, [], [integer_to_list(Days) ++ " days"]}, {th, [], ["All Time"]}]},
		       {tr, [], 
			[{td, [], ["Variation Coefficient"]}, 
			 {td, [], [f("~.2f%", [StdErrMonth*100])]},
			 {td, [], [f("~.2f%", [StdErrAll*100])]}]},
		       {tr, [], 
			[{td, [], ["Average Price"]}, 
			 {td, [], [f("~.2f", [AvgPriceTemp])]},
			 {td, [], [f("~.2f", [AvgPrice])]}]},
		       {tr, [], 
			[{td, [], ["Max Value"]}, 
			 {td, [], [f("~.2f", [MaxValueTemp])]},
			 {td, [], [f("~.2f", [MaxValue])]}]},
		       {tr, [], 
			[{td, [], ["Min Value"]}, 
			 {td, [], [f("~.2f", [MinValueTemp])]},
			 {td, [], [f("~.2f", [MinValue])]}]}]},		     
		     {table, [{class, "stock_table"}], 
		      [{tr, [], [{th, [{colspan, 2}], [Company ++ ", " ++  
						       integer_to_list(Days) ++ " days"]}]},
		       {tr, [], [{td, [{class, "width"}], "Date"}, {td, [{class, "adjacent"}], "Value"}]}] ++ 
		      lists:map(
			fun({Date, Value}) ->
				{tr, [], [{td, [], [date_lib:convert_date_e_s(Date)]},
					  {td, [{class, "adjacent"}], f("~p", [Value])}]}
			end, lists:sublist(lists:reverse(TempStocks), PageStart,Paginate)) ++ 
		     [{tr, [], 
		       [{td, [{colspan, 2}], 
			 [{a, [{href, lists:concat(["stock.yaws?", 
						    lists:map(
						     fun({Key, Val}) ->
							    lists:concat([Key, "=", Val])
						     end, lists:keystore("paginate_nr", 1,
									 QueryList, 
									 {"paginate_nr", "0"}))])}], ["<"]},
			  {a, [{href, lists:concat(["stock.yaws?", 
						    lists:map(
						     fun({Key, Val}) ->
							    lists:concat([Key, "=", Val])
						     end, lists:keystore("paginate_nr",
									 1,
									 QueryList, 
									 {"paginate_nr", integer_to_list(PaginateNr+1)}))])}], [">"]}
			 ]}]}]
		     }]};	       	
	undefined ->
	    Qh = db_handler:get_query_handle(company),
	    Query = qlc:q([Company || Company <- Qh]),
	    Companies = lists:sort(db_handler:q(Query)),
	    {ehtml, [{h1, [], ["Stocks"]},
		     {ul, [], 
		      lists:map(fun(#company{instrument=Instrument, name=Name}) ->
					{li, [], [{a, [{href, "stock.yaws?name=" ++ Instrument}], 
						   [Name]}]}
				end, Companies)}]}
    end.


	


std_err(DataSet) ->
    Avg = lists:sum(DataSet)/length(DataSet),
    SqrSum = 
	lists:sum(
	  lists:map(
	    fun(Val) ->
		    math:pow(Avg - Val, 2)
	    end, DataSet)),
    math:sqrt(SqrSum/(length(DataSet) -1))/Avg.

	</erl>
        </div>
<div id="rightcol" ></div>
	    </div> 
<div id="leftcol" ></div>
</div>
	<div id="footer" >
	</div>
	</div>
</body>

</html>
