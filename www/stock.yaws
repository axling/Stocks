<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" >
  <head>
    <title>Stocks</title>
    <meta http-equiv="content-type" content="text/html;charset=utf-8" />
    <link rel="stylesheet" href="css/layout.css" type="text/css" />
    <link rel="stylesheet" href="css/menu.css" type="text/css" />
    <link rel="stylesheet" href="css/tables.css" type="text/css" />
    <link rel="stylesheet" href="css/general.css" type="text/css" />
  </head>
  <body>
    <div id="pagewidth" >
      <div id="header" >
	<div id="headline">Stocks</div>
	<erl>
out(A) ->
    {ehtml, [{ul, [{class, "menu"}], 
	      [{li, [], 
		[{a, [{href, "index.yaws"}], [{span, [], ["Start"]}]}]},
	       {li, [], 
		[{a, [{href, "stock.yaws"}, {class, active}], [{span, [], ["Stocks"]}]}]}]}]}.
	</erl>
      </div>
      <div id="wrapper" class="clearfix" >
	<div id="twocols" class="clearfix"> 
	  <div id="maincol" >
	    <erl>
-include("include/mnesia_defs.hrl").
-include_lib("stdlib/include/qlc.hrl").
out(A) ->
    QueryList = yaws_api:parse_query(A),
    case proplists:get_value("name", QueryList) of
	Instrument when not is_atom(Instrument) ->
	    PostList = yaws_api:parse_post(A),
	   
	    PageSize = list_to_integer(proplists:get_value("page_size", QueryList, "15")),
	    PageNr = list_to_integer(proplists:get_value("page", QueryList, "1")),
	    
	    QhCompany = db_handler:get_query_handle(company),
	    [Company] = db_handler:q(qlc:q([C#company.name 
					    || C <- QhCompany, 
					       C#company.instrument==Instrument])),
	    
	    Days = list_to_integer(proplists:get_value("days", PostList, "30")),
	    FromDate = date_lib:date_minus_days(date_lib:today(), Days+1),
	    QhStocks = db_handler:get_query_handle(stocks),
	    StockQuery = qlc:q([Stock ||
				   Stock <- QhStocks, 
				   Stock#stocks.company == Company,
				   date_lib:is_greater(Stock#stocks.date, FromDate)]),	    
	    Stocks = lists:sort(
		       fun(StockA, StockB) ->
			       date_lib:is_greater(StockB#stocks.date, StockA#stocks.date)
		       end, db_handler:q(StockQuery)),
	    {PageStocks, PaginateLinks} = get_page_stocks(lists:reverse(Stocks), 
							  PageSize, PageNr, QueryList),

	    QhMvgAvg = db_handler:get_query_handle(mvg_avg),
	    MvgAvgQuery = qlc:q([M ||
				   M <- QhMvgAvg, 
				   M#mvg_avg.company == Company,
				   date_lib:is_greater(M#mvg_avg.date, FromDate)]),
	    MvgAvg = lists:sort(
		       fun(A, B) ->
			       date_lib:is_greater(B#mvg_avg.date, A#mvg_avg.date)
		       end, db_handler:q(MvgAvgQuery)),
	    QhExpAvg = db_handler:get_query_handle(exp_avg),
	    ExpAvgQuery = qlc:q([M ||
				    M <- QhExpAvg, 
				    M#exp_avg.company == Company,
				    date_lib:is_greater(M#exp_avg.date, FromDate)]),
	    ExpAvg = lists:sort(
		       fun(A, B) ->
			       date_lib:is_greater(B#exp_avg.date, A#exp_avg.date)
		       end, db_handler:q(ExpAvgQuery)),
	    QhMacd = db_handler:get_query_handle(macd),
	    MacdQuery = qlc:q([M ||
				  M <- QhMacd, 
				  M#macd.company == Company,
				  date_lib:is_greater(M#macd.date, FromDate)]),
	    Macd = lists:sort(
		     fun(A, B) ->
			     date_lib:is_greater(B#macd.date, A#macd.date)
		     end, db_handler:q(MacdQuery)),
	    QhAdx = db_handler:get_query_handle(adx),
	    AdxQuery = qlc:q([M ||
				 M <- QhAdx, 
				 M#adx.company == Company,
				 date_lib:is_greater(M#adx.date, FromDate)]),
	    Adx = lists:sort(
		    fun(A, B) ->
			    date_lib:is_greater(B#adx.date, A#adx.date)
		    end, db_handler:q(AdxQuery)),
	    
	    MacdChart = chart_builder:build_chart(
			  Company, [{[M#macd.value || M <- Macd], "MACD", {"0000FF", {3,6,6}}},
				    {[M#macd.signal || M <- Macd], "Signal", {"000000", {1,2,0}}},
				    {lists:duplicate(length(Macd), 0.0), "Zero Line", {"000011", {3,2,0}}}],
			  [M#macd.date || M <- Macd],
			  length(Macd), 400, 170),
	    ChartString = chart_builder:build_chart(
  			    Company, [{[S#stocks.closing || S <- Stocks], Company, {"000000", {1,2,0}}}, 
  				       {[M#mvg_avg.ten || M <- MvgAvg], "10 Day Moving Average", 
 					{"0000FF", {3,6,6}}},
 				      {[M#mvg_avg.thirty || M <- MvgAvg], "30 Day Moving Average", 
   				       {"AA2277", {3,15,12}}},
				      {[M#exp_avg.ten || M <- ExpAvg], "10 Day Exponential Average", 
   				       {"CCCC00", {4,20,20}}},
   				      {[M#exp_avg.thirty || M <- ExpAvg], "30 Day Exponential Average", 
  				       {"006666", {3,10,10}}}],
  			    [S#stocks.date || S <- Stocks],
  			    length(Stocks), 400, 220),
	   
	    AdxChart = chart_builder:build_chart(
 			 Company, [{[M#adx.di_plus || M <- Adx], "Di+", {"000000", {1,2,0}}},
 				   {[M#adx.di_minus || M <- Adx], "Di-", {"00AAAA", {1,2,0}}},
 				   {[M#adx.value || M <- Adx], "ADX", {"FF00FF", {3, 4, 6}}}],
  			 [M#adx.date || M <- Adx],
  			 length(Adx), 400, 170),
	    
	    %% Remove all values from stocks that are older than 30 days
	    {ehtml, [{img, [{src, ChartString}, {alt, "Chart"}]},
		     {img, [{src, MacdChart}, {alt, "MACD-Chart"}]},
		     {img, [{src, AdxChart}, {alt, "ADX Chart"}]},
		     {p, [],
		      [{form, [{name,"days_select"}, {method, "post"}, {action, "stock.yaws?" ++ A#arg.querydata}], 
			 [{select, [{name,"days"}, {onchange, "document.days_select.submit()"}], 
			   [{option, [{value, "30"}], ["30"]},
			    {option, [{value, "60"}], ["60"]},
			    {option, [{value, "365"}], ["1 Year"]},
			    {option, [{value, integer_to_list(365*2)}], ["2 Years"]}]}]}]},
		     {table, [{class, "stock_table"}], 
		      [{tr, [], [{th, [{colspan, 8}], [yaws_api:htmlize(Company) ++ ", " ++  
						       integer_to_list(Days) ++ " days"]}]},
		       {tr, [], [{td, [{class, "width"}], "Date"}, {td, [{class, "adjacent"}], "Closing"},
				 {td, [{class, "adjacent"}], "Highest"}, {td, [{class, "adjacent"}], "Lowest"},
				 {td, [{class, "adjacent"}], "Average"}, {td, [{class, "adjacent"}], "Turnover"},
				 {td, [{class, "adjacent"}], "Volume"},
				 {td, [{class, "adjacent"}], "Completions"}]}] 
		      ++ 
		      lists:map(
			fun(Stock) ->
				{tr, [], [{td, [], [date_lib:convert_date_e_s(Stock#stocks.date)]},
					  {td, [{class, "adjacent"}], f("~p", [Stock#stocks.closing])},
					  {td, [{class, "adjacent"}], f("~p", [Stock#stocks.highest])},
					  {td, [{class, "adjacent"}], f("~p", [Stock#stocks.lowest])},
					  {td, [{class, "adjacent"}], f("~p", [Stock#stocks.average])},
					  {td, [{class, "adjacent"}], f("~p", [Stock#stocks.turnover])},
					  {td, [{class, "adjacent"}], f("~p", [Stock#stocks.volume])},
					  {td, [{class, "adjacent"}], f("~p", [Stock#stocks.completions])}]}
			end, PageStocks) ++ 
		     [{tr, [], 
		       [{td, [{class, "paginate_links"},{colspan, 2}], 
			 PaginateLinks
			 }]}]
		     }]};	       	
	undefined ->
	    Qh = db_handler:get_query_handle(company),
	    Query = qlc:q([Company || Company <- Qh]),
	    Companies = lists:sort(db_handler:q(Query)),
	    {ehtml, [{h1, [], ["Stocks"]},
		     {ul, [], 
		      lists:map(fun(#company{instrument=Instrument, name=Name}) ->
					{li, [], [{a, [{href, "stock.yaws?name=" ++ Instrument}], 
						   [yaws_api:htmlize(Name)]}]}
				end, Companies)}]}
    end.


calculate_moving_average(StockValues, Days) when Days < length(StockValues) -> 
    calculate_moving_average(StockValues, 1, Days, []).

calculate_moving_average(StockValues, Start, Days, AccValues) 
  when (Start+Days-1) < length(StockValues) ->
    MvgAvg = lists:sum(lists:sublist(StockValues, Start, Days))/Days,
    calculate_moving_average(StockValues, Start+1, Days, [MvgAvg | AccValues]);
calculate_moving_average(_StockValues, _Start, _Days, AccValues) ->
    lists:reverse(AccValues).

calculate_cumulative_average(Values, Start) ->
    {List1, RestList} = lists:split(Start+1, Values),
    CumSum = lists:sum(List1)/length(List1),
    cum_avg(RestList, [CumSum], Start+1).

cum_avg([], AccVal, _) ->
    lists:reverse(AccVal);
cum_avg([First | Rest], [CA | _Rest]=AccVal, I) ->
    Sum = (First + CA*(I-1))/I,
    cum_avg(Rest, [Sum | AccVal], I+1).

get_page_stocks(Stocks, PageSize, PageNr, QueryList) ->
    LastPage = trunc(length(Stocks)/PageSize),
    if 
	((PageNr =< 1) and (Stocks /= [])) ->
	    PageStocks1 = lists:sublist(Stocks, PageSize),
	    Html = 
		[{a, [{href, make_page_link(2, QueryList)}], [">"]},
		 "   ",
		 {a, [{href, make_page_link(LastPage, QueryList)}], [">>"]}],
	    {PageStocks1, Html};
	
	(((PageNr - 1) * PageSize) < length(Stocks)) ->
	    PageStocks2 = lists:sublist(Stocks, ((PageNr-1)*PageSize), PageSize),
	    Html = 
		[{a, [{href, make_page_link(1, QueryList)}], ["<<"]},
		 "   ",
		 {a, [{href, make_page_link(PageNr-1, QueryList)}], ["<"]},
		 "   ",
		 {a, [{href, make_page_link(PageNr+1, QueryList)}], [">"]},		 
		 "   ",
		 {a, [{href, make_page_link(LastPage, QueryList)}], [">>"]}],
	    {PageStocks2, Html};
	true  ->
	    PageStocks3 = lists:sublist(Stocks, ((LastPage-1)*PageSize), PageSize),
	    Html = 
		[{a, [{href, make_page_link(1, QueryList)}], ["<<"]},
		 "   ",
		 {a, [{href, make_page_link(PageNr-1, QueryList)}], ["<"]}],
	    {PageStocks3, Html}
    end.
	    
make_page_link(Page, QueryList) ->
    NewQueryList = lists:keystore("page", 1, QueryList, {"page", integer_to_list(Page)}),
    "stock.yaws?" ++ make_query_string(NewQueryList).
					     
make_query_string(QueryList) ->
    string:join(
      lists:map(
	fun({Key, Val}) ->
		lists:concat([Key, "=", Val])
	end, QueryList),
     "&amp;").

	</erl>
        </div>
<div id="rightcol" ></div>
	    </div> 
<div id="leftcol" ></div>
</div>
	<div id="footer" >
	</div>
	</div>
</body>

</html>
