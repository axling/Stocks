<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" >
  <head>
    <title>Stocks</title>
    <meta http-equiv="content-type" content="text/html;charset=utf-8" />
    <link rel="stylesheet" href="css/layout.css" type="text/css" />
    <link rel="stylesheet" href="css/menu.css" type="text/css" />
    <link rel="stylesheet" href="css/tables.css" type="text/css" />
    <link rel="stylesheet" href="css/general.css" type="text/css" />
  </head>
  <body>
    <div id="pagewidth" >
      <div id="header" >
	<div id="headline">Stocks</div>
	<erl>
out(A) ->
    {ehtml, [{ul, [{class, "menu"}], 
	      [{li, [], 
		[{a, [{href, "index.yaws"}], [{span, [], ["Start"]}]}]},
	       {li, [], 
		[{a, [{href, "stock.yaws"}, {class, active}], [{span, [], ["Stocks"]}]}]}]}]}.
	</erl>
      </div>
      <div id="wrapper" class="clearfix" >
	<div id="twocols" class="clearfix"> 
	  <div id="maincol" >
	    <erl>
-include("include/mnesia_defs.hrl").
-include("include/html_pages.hrl").
-include("include/chart.hrl").
-include_lib("stdlib/include/qlc.hrl").
out(A) ->
    Data = format_data(A),
    render(Data).

format_data(A) -> 
    PostList = yaws_api:parse_post(A),
    QueryList = yaws_api:parse_query(A),
    case proplists:get_value("name", QueryList) of
	Instrument when not is_atom(Instrument) ->
	    Days = list_to_integer(proplists:get_value("days", QueryList, "30")),
	    PageSize = list_to_integer(proplists:get_value("page_size", QueryList, "30")),
	    PageNr = list_to_integer(proplists:get_value("page", QueryList, "1")),
	    [Sec] = db_lib:e(qlc:q([S || S <- db_lib:h(sec), S#sec.instrument==Instrument])),
	    Name = Sec#sec.name,
	    Macd = safe_access(db_lib:e(qlc:q([M || M <- db_lib:h(analysis), M#analysis.company==Name,
					  M#analysis.type==macd]))),
	    Adx = safe_access(db_lib:e(qlc:q([M || M <- db_lib:h(analysis), M#analysis.company==Name,
						   M#analysis.type==adx]))),
	    Atr = safe_access(db_lib:e(qlc:q([M || M <- db_lib:h(analysis), M#analysis.company==Name,
						   M#analysis.type==atr]))),
	    MvgAvg = safe_access(db_lib:e(qlc:q([M || M <- db_lib:h(analysis), M#analysis.company==Name,
						      M#analysis.type==mvg_avg]))),
	    ExpAvg = safe_access(db_lib:e(qlc:q([M || M <- db_lib:h(analysis), M#analysis.company==Name,
						      M#analysis.type==exp_avg]))),
	    Stochastic = safe_access(db_lib:e(qlc:q([M || M <- db_lib:h(analysis), M#analysis.company==Name,
							  M#analysis.type==stochastic]))),
	    StockList = format_stock_list(Sec#sec.data, PageNr, PageSize, QueryList),
	    DateAlign = lists:reverse([S#stock.date || S <- lists:sublist(Sec#sec.data, Days)]),
	    StockChart = format_stock_chart(Name, lists:reverse(lists:sublist(Sec#sec.data, Days)), 
					    lists:reverse(lists:sublist(MvgAvg#analysis.result, Days)), 
					    lists:reverse(lists:sublist(ExpAvg#analysis.result, Days)),
					    DateAlign),
	    MacdChart = format_macd_chart(Name, lists:reverse(lists:sublist(Macd#analysis.result, Days)),
					  DateAlign),
	    AdxChart = format_adx_chart(Name, lists:reverse(lists:sublist(Adx#analysis.result, Days)),
					DateAlign),
	    AtrChart = format_atr_chart(Name, lists:reverse(lists:sublist(Atr#analysis.result, Days)),
					DateAlign),
	    StochasticChart = format_stochastic_chart(Name, lists:reverse(lists:sublist(Stochastic#analysis.result, Days)),
						      DateAlign),
	    
	    #stock_page{all=false,
			name=Name, instrument=Instrument,
			days=Days,stock_chart=StockChart,
			macd_chart=MacdChart,adx_chart=AdxChart,
			atr_chart=AtrChart, stochastic_chart=StochasticChart, 
			stock_table=StockList};
	undefined ->
	    #stock_page{all=true,
			all_stock_list=format_all_stock_list()}
    end.
	
render(#stock_page{}=S) ->
    case S#stock_page.all of
	true ->
	    {ehtml, [{h1, [], ["All Stocks"]}] ++
	     S#stock_page.all_stock_list};
	false ->
	    {ehtml, [{h2, [], [S#stock_page.name]}] ++
	     S#stock_page.stock_chart ++
	     S#stock_page.macd_chart ++
	     S#stock_page.adx_chart ++
	     S#stock_page.atr_chart ++
	     S#stock_page.stochastic_chart ++
	     S#stock_page.stock_table}
    end.
		     
format_all_stock_list() ->
    Securities = db_lib:e(qlc:q([{C#sec.name, C#sec.instrument, C#sec.market, C#sec.day_trend} || C <- db_lib:h(sec)])),
    Large = lists:sort(lists:filter(fun({_, _, largecap, _}) ->
					    true;
				       ({_, _, "largecap", _}) ->
					    true;
				       (_Else) ->
					    false
				    end, Securities)),
    Mid = lists:sort(lists:filter(fun({_, _, midcap, _}) ->
					  true;
				     ({_, _, "midcap", _}) ->
					  true;
				     (_Else) ->
					  false
				  end, Securities)),
    Small = lists:sort(lists:filter(fun({_, _, smallcap, _}) ->
					    true;
				       ({_, _, "smallcap", _}) ->
					    true;
				       (_Else) ->
					    false
				    end, Securities)),
    [{h3, [], ["Large Cap"]},
     {ul, [], 
      lists:map(fun({Name, Instrument, _, DayTrend}) ->
			{li, [], [{a, [{href, "stock.yaws?name=" ++ Instrument}], 
				   [yaws_api:htmlize(Name)]}, ", " ++ ff(100*DayTrend)]}
		end, Large)},
     {h3, [], ["Mid Cap"]},
     {ul, [] ,
      lists:map(fun({Name, Instrument, _, DayTrend}) ->
			{li, [], [{a, [{href, "stock.yaws?name=" ++ Instrument}], 
				   [yaws_api:htmlize(Name)]}, ", " ++ ff(100*DayTrend)]}
		end, Mid)},
     {h3, [], ["Small Cap"]},
     {ul, [] ,
      lists:map(fun({Name, Instrument, _, DayTrend}) ->
			{li, [], [{a, [{href, "stock.yaws?name=" ++ Instrument}], 
				   [yaws_api:htmlize(Name)]}, ", " ++ ff(100*DayTrend)]}
		end, Small)}]. 
format_stock_list([], PageNr, PageSize, QueryList) ->
    [];
format_stock_list(Data, PageNr, PageSize, QueryList) ->
    {PageStocks, PaginateLinks} = get_page_stocks(Data, PageSize, PageNr, QueryList),
    [{table, [{class, "stock_table"}], 
      [[{td, [{class, "width"}], "Date"}, {td, [{class, "adjacent"}], "Closing"},
	{td, [{class, "adjacent"}], "Highest"}, {td, [{class, "adjacent"}], "Lowest"},
	{td, [{class, "adjacent"}], "Average"}, {td, [{class, "adjacent"}], "Turnover"},
	{td, [{class, "adjacent"}], "Volume"},
	{td, [{class, "adjacent"}], "Completions"}]] ++
      lists:map(
	fun(Stock) ->
		{tr, [], [{td, [], [date_lib:convert_date_e_s(Stock#stock.date)]},
			  {td, [{class, "adjacent"}], f("~p", [Stock#stock.closing])},
			  {td, [{class, "adjacent"}], f("~p", [Stock#stock.highest])},
			  {td, [{class, "adjacent"}], f("~p", [Stock#stock.lowest])},
			  {td, [{class, "adjacent"}], f("~p", [Stock#stock.average])},
			  {td, [{class, "adjacent"}], f("~p", [Stock#stock.turnover])},
			  {td, [{class, "adjacent"}], f("~p", [Stock#stock.volume])},
			  {td, [{class, "adjacent"}], f("~p", [Stock#stock.completions])}]}
	end, PageStocks)},
     PaginateLinks].

format_stock_chart(Name, Data, MvgAvg, ExpAvg, DateAlign) ->
    ImgString = chart_builder:render(
		  #google_chart{title=lists:concat([Name, ": last ",  length(Data), " entries"]),
				font_size=14,
				height=250,
				date_alignment=DateAlign,
				data=
				[#chart_data{
				  color="000000",
				  line_width=5,
				  legend=Name,
				  values=[{S#stock.closing, S#stock.date} || S <- Data]},
				 #chart_data{color="115552",
					     line_width=3,
					     line_length=5,
					     blank_length=5,
					     legend=lists:concat([Name, ": moving average 10 days"]),
					     values=[{M#mvg_avg.ten, M#mvg_avg.date} || M <- MvgAvg]},
				 #chart_data{color="FFAA11",
					     line_width=3,
					     line_length=5,
					     blank_length=5,
					     legend=lists:concat([Name, ": moving average 30 days"]),
					     values=[{M#mvg_avg.thirty, M#mvg_avg.date} || M <- MvgAvg]}]
			       }),
    [{img, [{src, ImgString}, {alt, "Chart"}]}].

format_macd_chart(Name, Macd, DateAlign) ->
    ImgString = chart_builder:render(
		  #google_chart{title=lists:concat([Name, ": MACD chart"]),
				font_size=12,
				height=150,
				date_alignment=DateAlign,
				data=
				[#chart_data{
				  color="000000",
				  line_width=5,
				  legend="MACD",
				  values=[{S#macd.value, S#macd.date } || S <- Macd]},				 
				 #chart_data{color="115552",
					     line_width=3,
					     line_length=5,
					     blank_length=5,
					     legend="Signal",
					     values=[{M#macd.signal, M#macd.date} || M <- Macd]}]
			       }),
    [{img, [{src, ImgString}, {alt, "Chart"}]}].

format_adx_chart(Name, Adx, DateAlign) ->
    ImgString = chart_builder:render(
		  #google_chart{title=lists:concat([Name, ": ADX chart"]),
				font_size=12,
				height=150,
				date_alignment=DateAlign,
				data=
				[#chart_data{
				  color="000000",
				  line_width=5,
				  legend="ADX",
				  values=[{S#adx.value, S#adx.date} || S <- Adx]},
				 #chart_data{color="115552",
					     line_width=3,
					     line_length=5,
					     blank_length=5,
					     legend="DI+",
					     values=[{M#adx.di_plus, M#adx.date} || M <- Adx]},
				#chart_data{color="FF9999",
					    line_width=3,
					    line_length=5,
					    blank_length=5,
					    legend="DI-",
					    values=[{M#adx.di_minus, M#adx.date} || M <- Adx]}]
			       }),
    [{img, [{src, ImgString}, {alt, "Chart"}]}].

format_atr_chart(Name, Atr, DateAlign) ->
    ImgString = chart_builder:render(
		  #google_chart{title=lists:concat([Name, ": ATR chart"]),
				font_size=12,
				height=150,
				date_alignment=DateAlign,
				data=
				[#chart_data{
				  color="000000",
				  line_width=5,
				  legend="ATR",
				  values=[{S#atr.value, S#atr.date} || S <- Atr]}]
			       }),
    [{img, [{src, ImgString}, {alt, "Chart"}]}].

format_stochastic_chart(Name, Stochastic, DateAlign) ->
    ImgString = chart_builder:render(
		  #google_chart{title=lists:concat([Name, ": Stochastic chart"]),
				font_size=12,
				height=150,
				date_alignment=DateAlign,
				data=
				[#chart_data{
				  color="00FFFF",
				  line_width=5,
				  legend="%K",
				  values=[{S#stochastic.percent_k, S#stochastic.date} || S <- Stochastic]},
				#chart_data{
				  color="000000",
				  line_width=5,
				  legend="%D",
				  values=[{S#stochastic.percent_d, S#stochastic.date} || S <- Stochastic]}]
			       }),
    [{img, [{src, ImgString}, {alt, "Chart"}]}].

get_page_stocks(Stocks, PageSize, PageNr, QueryList) ->
    LastPage = trunc(length(Stocks)/PageSize),
    if 
	((PageNr =< 1) and (Stocks /= [])) ->
	    PageStocks1 = lists:sublist(Stocks, PageSize),
	    Html = 
		[{a, [{href, make_page_link(2, QueryList)}], [">"]},
		 "   ",
		 {a, [{href, make_page_link(LastPage, QueryList)}], [">>"]}],
	    {PageStocks1, Html};
	
	(((PageNr - 1) * PageSize) < length(Stocks)) ->
	    PageStocks2 = lists:sublist(Stocks, ((PageNr-1)*PageSize), PageSize),
	    Html = 
		[{a, [{href, make_page_link(1, QueryList)}], ["<<"]},
		 "   ",
		 {a, [{href, make_page_link(PageNr-1, QueryList)}], ["<"]},
		 "   ",
		 {a, [{href, make_page_link(PageNr+1, QueryList)}], [">"]},		 
		 "   ",
		 {a, [{href, make_page_link(LastPage, QueryList)}], [">>"]}],
	    {PageStocks2, Html};
	true  ->
	    PageStocks3 = lists:sublist(Stocks, ((LastPage-1)*PageSize), PageSize),
	    Html = 
		[{a, [{href, make_page_link(1, QueryList)}], ["<<"]},
		 "   ",
		 {a, [{href, make_page_link(PageNr-1, QueryList)}], ["<"]}],
	    {PageStocks3, Html}
    end.
	    
make_page_link(Page, QueryList) ->
    NewQueryList = lists:keystore("page", 1, QueryList, {"page", integer_to_list(Page)}),
    "stock.yaws?" ++ make_query_string(NewQueryList).
					     
make_query_string(QueryList) ->
    string:join(
      lists:map(
	fun({Key, Val}) ->
		lists:concat([Key, "=", Val])
	end, QueryList),
     "&amp;").

safe_access([]) ->
    #analysis{result=[]};
safe_access(L) when is_list(L) ->
    hd(L).
    
ff(F) when is_float(F) ->
    f("~.2f", [F]);
ff(F) when is_integer(F) ->
    integer_to_list(F).

	</erl>
        </div>
<div id="rightcol" ></div>
	    </div> 
<div id="leftcol" ></div>
</div>
	<div id="footer" >
	</div>
	</div>
</body>

</html>
