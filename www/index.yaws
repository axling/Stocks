<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" >
  <head>
    <title>Stocks</title>
    <meta http-equiv="content-type" content="text/html;charset=utf-8" />
    <link rel="stylesheet" href="css/layout.css" type="text/css" />
    <link rel="stylesheet" href="css/menu.css" type="text/css" />
    <link rel="stylesheet" href="css/general.css" type="text/css" />
  </head>
  <body>
    <div id="pagewidth" >
      <div id="header" >
	<div id="headline">Stocks</div>
	<erl>
out(A) ->
    {ehtml, [{ul, [{class, "menu"}], 
	      [{li, [], 
		[{a, [{href, "index.yaws"}, {class, active}], [{span, [], ["Start"]}]}]},
	       {li, [], 
		[{a, [{href, "stock.yaws"}], [{span, [], ["Stocks"]}]}]}]}]}.
        </erl>
      </div>
      <div id="wrapper" class="clearfix" >
	<div id="twocols" class="clearfix"> 
	  <div id="maincol" >
	    <erl>
-include("include/mnesia_defs.hrl").
-include_lib("stdlib/include/qlc.hrl").
out(A) ->
    QueryList = yaws_api:parse_query(A),
    TrendSort = list_to_integer(proplists:get_value("trend_sort", QueryList, "7")),
    QhAnalysis = db_handler:get_query_handle(analysis),
    QhCompany = db_handler:get_query_handle(company),
    Q = qlc:q([Analysis#analysis.date || Analysis <- QhAnalysis]),
    SortedDates = lists:sort(fun(A, B) ->
				     date_lib:is_greater(B, A)
			     end, db_handler:q(Q)),
    case SortedDates of
	[] ->
	    {ehtml, [{p, [], ["No analysis available"]}]};
	SortedDates ->
	    LastWorkDay = hd(SortedDates),
	    Query = qlc:q([A || A <- QhAnalysis, 
				    A#analysis.date == LastWorkDay,
				    ((A#analysis.result)#trend_result.days) == TrendSort]),
	    Analysis = lists:sort(fun(#analysis{result=#trend_result{trend=TrendA}},
				      #analysis{result=#trend_result{trend=TrendB}}) ->
					  TrendA < TrendB
				  end, db_handler:q(Query)),
	    FiveWorst = lists:reverse(lists:sublist(Analysis, 5)),
	    FiveBest = lists:reverse(lists:nthtail(length(Analysis)-5, Analysis)),
	    FiveBestRows = lists:map(fun map_analysis/1, FiveBest),
	    FiveWorstRows = lists:map(fun map_analysis/1, FiveWorst),

	    {ehtml, [{table, [{class, "stock_table"}], 
		      [{tr, [], [{td, [{colspan, 5}], ["Five Best"]}]},
		       {tr, [], 
			[{th, [], ["Stock"]},
			 {th, [], ["7 Days"]},
			 {th, [], ["30 Days"]},
			 {th, [], ["60 Days"]},
			 {th, [], ["365 Days"]}]}] ++
		      FiveBestRows ++
		      [{tr, [], [{td, [{colspan, 5}], []}]},
		       {tr, [], [{td, [{colspan, 5}], ["Five Worst"]}]},
		       {tr, [], 
			[{th, [], ["Stock"]},
			 {th, [], ["7 Days"]},
			 {th, [], ["30 Days"]},
			 {th, [], ["60 Days"]},
			 {th, [], ["365 Days"]}]}] ++
		      FiveWorstRows
		     }]}
    end.

map_analysis(#analysis{company=Name}) ->
    
    QhAnalysis = db_handler:get_query_handle(analysis),
    Q3 = qlc:q([Analysis#analysis.date || Analysis <- QhAnalysis]),
    SortedDates = lists:sort(fun(A, B) ->
				     date_lib:is_greater(B, A)
			     end, db_handler:q(Q3)),
    LastWorkDay = hd(SortedDates),
    QhCompany = db_handler:get_query_handle(company),
    Q = qlc:q([A1 || A1 <- QhAnalysis, 
		     A1#analysis.date == LastWorkDay,
		     A1#analysis.company == Name]),
    Q2 = qlc:q([C#company.instrument || C <- QhCompany,
					C#company.name == Name]),
    [Instrument] = db_handler:q(Q2),
    StocksAnalysis = lists:sort(fun(#analysis{result=#trend_result{days=Days1}},
				    #analysis{result=#trend_result{days=Days2}}) ->
					Days1 < Days2
				end, db_handler:q(Q)),
    {tr, [],
     [[{td, [], [{a, [{href, "stock.yaws?name=" ++ Instrument}], [Name]}]}] ++
      lists:map(
	fun(OneAnalysis) ->
		{td, [], [io_lib:format("~.2f%", 
					[(OneAnalysis#analysis.result)#trend_result.trend * 100])]}
	end, StocksAnalysis)]}.

	</erl>
        </div>
<div id="rightcol" ></div>
	    </div> 
<div id="leftcol" ></div>
</div>
	<div id="footer" > 
	</div>
	</div>
</body>

</html>


