<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" >
  <head>
    <title>Stocks</title>
    <meta http-equiv="content-type" content="text/html;charset=utf-8" />
    <link rel="stylesheet" href="../css/layout.css" type="text/css" />
    <link rel="stylesheet" href="../css/menu.css" type="text/css" />
    <link rel="stylesheet" href="../css/tables.css" type="text/css" />
    <link rel="stylesheet" href="../css/general.css" type="text/css" />
  </head>
  <body>
    <div id="pagewidth" >
      <div id="header" >
	<div id="headline">Stocks</div>
	<erl>
out(A) ->
    {ehtml, [{ul, [{class, "menu"}], 
	      [{li, [], 
		[{a, [{href, "admin.yaws"}], [{span, [], ["Admin"]}]}]},
	       {li, [],     
		[{a, [{href, "time.yaws"}], [{span, [], ["Time Management"]}]}]},
	       {li, [],     
		[{a, [{href, "code.yaws"}, {class, active}], [{span, [], ["Code Management"]}]}]}
	      ]}]}.
	</erl>
      </div>
      <div id="wrapper" class="clearfix" >
	<div id="twocols" class="clearfix"> 
	  <div id="maincol" >
	    <erl>
out(A) ->
    PostList = yaws_api:parse_post(A),
    LoadRes = case proplists:is_defined("load_all_code", PostList) of
		  true ->
		      do_load(PostList);
		  false ->
		      []
	      end,

    RestartRes = case proplists:is_defined("restart", PostList) of
		     true ->
			 do_restart();
		     false ->
			 []
		 end,
    
    {ehtml, 
     [{form, [{name, "load_all"}, {action, "code.yaws"}, {method, post}], 
       [{input, [{name, "load_all_code"}, {type, "submit"}, {value, "Load All Code"}]}]},
      {form, [{name, "restart"}, {action, "code.yaws"}, {method, post}], 
       [{input, [{name, "restart"}, {type, "submit"}, {value, "Restart"}]}]}] ++
       LoadRes}.

do_load(PostList) ->
    Res = load_all_code(),
    format_res(Res).
	
do_restart() ->
    stocks_sup:start(),
    [].

load_all_code() ->
    {ok, Cwd} = file:get_cwd(),
    {ok, Files} = file:list_dir(filename:join(Cwd, "ebin")),
    lists:map(
      fun(File) ->
	      case filename:extension(File) of
		 ".beam" ->
		      code:purge(list_to_atom(filename:basename(File, ".beam"))),
		      code:load_file(list_to_atom(filename:basename(File, ".beam")));
		 Else ->
		      skip
	      end
      end, Files).

format_res(Res) ->
    Filtered = lists:filter(fun({module, _}) -> false; (skip) -> false; (_) -> true end, Res),
    case Filtered of
	[] ->
	    [{ul, [], [{li, [], ["Code loaded ok"]}]}];
	Else when is_list(Else) ->
	    {ul, [], 
	     [
	      lists:map(fun(Term) ->
				{li, [], [f("Error loading, reason: ~p", [Term])]}
			end, Else)]}
    end.
    
	</erl>
        </div>
<div id="rightcol" ></div>
	    </div> 
<div id="leftcol" ></div>
</div>
	<div id="footer" >
	</div>
	</div>
</body>

</html>
