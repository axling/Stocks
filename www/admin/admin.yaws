<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" >
  <head>
    <title>Stocks</title>
    <meta http-equiv="content-type" content="text/html;charset=utf-8" />
    <link rel="stylesheet" href="../css/layout.css" type="text/css" />
    <link rel="stylesheet" href="../css/menu.css" type="text/css" />
    <link rel="stylesheet" href="../css/tables.css" type="text/css" />
    <link rel="stylesheet" href="../css/general.css" type="text/css" />
  </head>
  <body>
    <div id="pagewidth" >
      <div id="header" >
	<div id="headline">Stocks</div>
	<erl>
out(A) ->
    {ehtml, [{ul, [{class, "menu"}], 
	      [{li, [], 
		[{a, [{href, "admin.yaws"}], [{span, [], ["Admin"]}]}]}
	       ]}]}.
	</erl>
      </div>
      <div id="wrapper" class="clearfix" >
	<div id="twocols" class="clearfix"> 
	  <div id="maincol" >
	    <erl>
-include("include/mnesia_defs.hrl").
-include_lib("stdlib/include/qlc.hrl").
out(A) ->
    QueryList = yaws_api:parse_query(A),
    PostList = yaws_api:parse_post(A),

    do_actions(PostList),
    
    ContentState = content_handler:dump(),
    UpdatingCompanies = element(3, ContentState),
    UpdatingState =
	if length(UpdatingCompanies) > 0 ->
		%%updating
		"System is updating";
	   true ->
		%%not_updating
		case lists:keymember("updatestocks", 1, QueryList) of
		    true ->			
			content_handler:update_content(),
			"System is updating";
		    false ->
			{form, [{name, "all_update"}, {action, "admin.yaws"}, {method, get}], 
			 [{input, [{name, "updatestocks"}, {type, "submit"}, {value, "Update All Stocks"}]}]}
		end
	end,
    AnalysingCompanies = analysis_handler:dump(),
    AnalysisState =
	if length(AnalysingCompanies) > 0 ->
		%%updating
		"System is analysing";
	   true ->
		%%not_updating
		case lists:keymember("analysestocks", 1, QueryList) of
		    true ->			
			analysis_handler:analyse(),
			"System is analysing";
		    false ->
			{form, [{name, "all_analyse"}, {action, "admin.yaws"}, {method, get}], 
			 [{input, [{name, "analysestocks"}, {type, "submit"}, {value, "Analyse All Stocks"}]}]}
		end
	end,
    
    Qh = db_handler:get_query_handle(company),
    Query = qlc:q([Company || Company <- Qh]),
    Companies = lists:sort(db_handler:q(Query)),
    CompanyRows = create_company_rows(Companies, UpdatingCompanies, AnalysingCompanies),
    
    {ehtml, [UpdatingState,
	     AnalysisState, 
	     {br},
	     {table, [],
	      [{tr, [], 
		[{th, [], ["Company Name"]},
		 {th, [], ["Instrument Nr"]},
		 {th, [], ["Market Type"]},
		 {th, [], []},
		 {th, [], []},
		 {th, [], []}]},
	       {tr, [], 
	       [{form, [{name, "add_company"}, {action,"admin.yaws"}, {method, "post"}],
		 [{td, [], [{input, [{name, "add_name"}, {type, text}]}]},
		  {td, [], [{input, [{name, "add_instrument"}, {type, text}]}]},
		  {td, [], [{input, [{name, "add_market"}, {type, text}]}]},
		  {td, [{colspan, "3"}], [{input, [{type, "submit"}, {value, "Add Company"}]}]}]}]}]
	      ++ CompanyRows}]}.

do_actions([]) ->
    ok;
do_actions([{Type, Value} | _Rest] = PostList) ->
    case lists:nth(1, string:tokens(Type, "_")) /= "add" of
	true ->
	    [Instrument, ActionType] = string:tokens(Type, "_"),
	    case ActionType of
		"updatestock" ->
		    Qh = db_handler:get_query_handle(company),
		    Query = qlc:q([Company#company.name || Company <- Qh, 
							   Company#company.instrument == 
							       string:to_upper(Instrument)]),
		    [CompanyName]= db_handler:q(Query),
		    content_handler:update_content([CompanyName]);
		"analysestock" ->
		    Qh = db_handler:get_query_handle(company),
		    Query = qlc:q([Company#company.name || Company <- Qh, 
							   Company#company.instrument == 
							       string:to_upper(Instrument)]),
		    [CompanyName]= db_handler:q(Query),
		    analysis_handler:analyse(CompanyName);
		Else -> 
		    Qh = db_handler:get_query_handle(company),
		    Query = qlc:q([Company || Company <- Qh, 
					      Company#company.instrument == 
						  string:to_upper(Instrument)]),
		    [Company]= db_handler:q(Query),
		    InstrumentVal = proplists:get_value("instrument", PostList),
		    MarketVal = proplists:get_value("market", PostList),
		    ok = db_handler:create_entry(Company#company{instrument=InstrumentVal,
								 market=MarketVal})
	    end;
	false ->
	    Name = proplists:get_value("add_name", PostList),
	    Instrument = proplists:get_value("add_instrument", PostList),
	    Market = proplists:get_value("add_market", PostList),
	    ok = db_handler:create_entry(#company{name=Name, instrument=Instrument, market=Market})
    end.

create_company_rows(Companies, UpdatingCompanies, AnalysingCompanies) ->
    lists:map(
      fun(Company) ->
	      Id = string:to_lower(Company#company.instrument), 
	      UpdateAll =
		  case lists:keyfind(Company#company.name, 1, UpdatingCompanies) of
		      false ->
			  {form, [{action, "admin.yaws"}, {name, Id ++ "update"},
				  {method, "post"}], 
			   [{input, [{name, Id ++ "_updatestock"}, {type, "submit"}, 
				     {value, "Update Stock Quotes"}]}]};
		      _Else ->
			  "Updating..."
		  end,
	      AnalyseAll =
		  case lists:member(Company#company.name, AnalysingCompanies) of
		      false ->
			  {form, [{action, "admin.yaws"}, {name, Id ++ "analyse"},
				  {method, "post"}], 
			   [{input, [{name, Id ++ "_analysestock"}, {type, "submit"}, 
				     {value, "Analyse Stock Quotes"}]}]};
		      true ->
			  "Analysing..."
		  end,
	      {tr, [], 
	       [{td, [], [Company#company.name]},
		{form, [{action, "admin.yaws"}, {name, Id ++ "_form"}, {method, "post"}], 
		 [{td, [], 
		   [{input, [{name, Id ++ "_instrument"}, {type, "text"}, 
			     {value, Company#company.instrument}]}]},
		  {td, [], 
		   [{input, [{name, Id ++ "_market"}, {type, "text"}, 
			     {value, Company#company.market}]}]},
		  {td, [], 
		   [{input, [{type, "submit"}, {value, "Update Company Info"}]}]}]},
		{td, [], 
		 [UpdateAll]},
		{td, [], 
		 [AnalyseAll]}]}
      end, Companies).

make_query_string(QueryList) ->
    string:join(
      lists:map(
	fun({Key, Val}) ->
		lists:concat([Key, "=", Val])
	end, QueryList),
      "&amp;").

	</erl>
        </div>
<div id="rightcol" ></div>
	    </div> 
<div id="leftcol" ></div>
</div>
	<div id="footer" >
	</div>
	</div>
</body>

</html>
